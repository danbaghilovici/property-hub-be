on:
  workflow_call:
    inputs:
      workspace:
        required: true
        type: string
    secrets:
      aws-secret-access-key:
        required: true
      aws-access-key-id:
        required: true


jobs:
  deploy-be:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: infrastructure
    env:
      DOWNLOAD_PATH: artifacts
    outputs:
      AWS_DATABASE_NAME: ${{ steps.tfout.outputs.AWS_DATABASE_NAME }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Get build zip
        id: download
        uses: actions/download-artifact@v3
        with:
          name: dist-artifact-be
          path: ${{ env.DOWNLOAD_PATH }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.5.2

      - name: Terraform Prepare
        run: |
          terraform init
          terraform validate
          terraform workspace select -or-create ${{ inputs.workspace }}
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.aws-access-key-id }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.aws-secret-access-key }}
      - name: Terraform Apply
        id: deployment
        run: |
          terraform plan -lock=false -var="lambda_payload_filename=../$DOWNLOAD_PATH/nest-lambda.zip" -out tf.plan >/dev/null
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.aws-access-key-id }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.aws-secret-access-key }}
      - name: Terraform output
        id: tfout
        run: |
          echo 'AWS_DATABASE_NAME=$(terraform output -raw database_name)\n' >> $GITHUB_OUTPUT
          echo 'AWS_DATABASE_USERNAME=$(terraform output -raw database_username)' >> $GITHUB_OUTPUT
          echo 'AWS_DATABASE_PASSWORD=$(terraform output -raw database_password)' >> $GITHUB_OUTPUT
          echo 'AWS_DATABASE_PORT=$(terraform output -raw database_port)' >> $GITHUB_OUTPUT
          echo 'AWS_DATABASE_HOST=$(terraform output -raw database_host)' >> $GITHUB_OUTPUT
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.aws-access-key-id }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.aws-secret-access-key }}
  migrate:
    needs: deploy-be
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./
    steps:

      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 18

      - name: Apply migrations
        run: npm install && npm run migration:run
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.aws-access-key-id }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.aws-secret-access-key }}
          AWS_DATABASE_NAME: ${{ needs.deploy-be.outputs.AWS_DATABASE_NAME }}
          AWS_DATABASE_USERNAME: ${{ env.AWS_DATABASE_USERNAME }}
          AWS_DATABASE_PASSWORD: ${{ env.AWS_DATABASE_PASSWORD }}
          AWS_DATABASE_PORT: ${{ env.AWS_DATABASE_PORT }}
          AWS_DATABASE_HOST: ${{ env.AWS_DATABASE_HOST }}

